<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC 
	"-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="es">
	<articleinfo>
		<title>Guía de Arquitectura eID Trust Service</title>
		<copyright>
			<year>2008-2010</year>
			<holder>Fedict</holder>
		</copyright>
		<releaseinfo>31 Mar 2010</releaseinfo>
		<authorgroup>
			<author>
				<firstname>Wim</firstname>
				<surname>Vandenhaute</surname>
			</author>
		</authorgroup>
		<abstract>
			<para>This manual serves as an entry point for setting up the eID
				Trust Service.</para>
		</abstract>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			
			El Trust Service  provee dos servicios principales:
			<orderedlist>
				<listitem>
					eID Trust Service portal
					<para>Via este portal web, los ciudadanos pueden revisar la validez de sus certificados</para>
				</listitem>
				<listitem>
					eID Trust Service web service para validación
					<para>Vía este web service SOPA, los Proveedores de Servicios 
                                            pueden revisar la validez de rutas de certificados. Este web service está construido de acuerdo al  estándar  W3C XKMS2.</para>
				</listitem>
			</orderedlist>
			A parte de estos dos artefactos, el eID Trust Service 
                        también viene con un portal de Administración que permite  
                        a los administradores utilizar y configurar el 
                        eID Trust Service a través de una interfaz web. 
                        En los siguientes párrafos utilizaremos el 
                        $EID_TRUST_SERVICE_ADDRESS como la dirección web 
                        interna de el eID Trust Service que ha sido desplegado.
		</para>
	</section>
	<section>
		<title>Arquitectura</title>
		<para>
			La arquitectura de el eID Trust Service es mostrada en
			<xref linkend="eid-trust-service-arch" />
			. Los detalles se explican en las siguientes secciones.
		</para>
		<figure id="eid-trust-service-arch">
			<title>Arquitectura del eID Trust Service</title>
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata format="PNG" fileref="eid-trust-service-architecture.png"
							scale="75" align="center" />
					</imageobject>
				</mediaobject>
			</screenshot>
		</figure>
		<section>
			<title>OCSP Responder y CRL Repository</title>
			<para>
				El eID Trust Service utiliza servicios existentes 
                            de validación-PKI para la validación de rutas de certificados.
			</para>
		</section>
		<section>
			<title>jTrust</title>
			<para>
				Este componente de software maneja la validación-PKI, 
                            utilizando OCSP en línea y servicios de CLR. El diseño 
                            interno de este componente permite fácilmente agregar 
                            enlazadores de confianza externo
                            El eID Trust Service realiza tal tarea por ejemplo 
                            agregando un enlazador de confianza personalizado 
                            manteniendo una cache CRL.
			</para>
			<para>
				Solamente se necesita una configuración limitada 
                            puesto que la librería jTrust utiliza los URI's que 
                            se encuentran dentro de los Certificados para OCSP 
                            y validación CRL.
			</para>
			<para>
				El código fuente de este componente puede ser encontrado en:
				<ulink url="http://code.google.com/p/jtrust/">jTrust</ulink>
			</para>
		</section>
		<section>
			<title>Trust Service Model</title>
			<para>
				El eID Trust Service Model es un módulo de software 
                            escrito en tecnología EJB3. Este módulo administra 
                            dominios de confianza, configuración del servicio, 
                            cache de revocación de certificados y más. 
                            El módulo jTrust utiliza este cache de revocación de 
                            certificados durante la validación de la ruta de certificados.
			</para>
		</section>
		<section>
			<title>XKMS v2.0</title>
			<para>
				La interfaz primaria de el eID Trust Service  para 
                            Proveedores de Servicios es un web service el cual 
                            está basado en el estándar W3C XKMS v . El protocolo 
                            de enlace utilizado es HTTP SOAP. Dependiendo de la 
                            configuración de políticas de seguridad de el eID
                            Trust Service (configurable por un administrador) 
                            una aplicación puede utilizar este web service sin 
                            necesidad de autenticación de servicio, con autenticación 
                            TLS unilateral o autenticación a nivel de mensajes 
                            utilizando respuestas XKMS2 firmadas.
			</para>
		</section>
		<section>
			<title>SDK</title>
			<para>
				El SDK del eID Trust Service permite a los Proveedores de Servicio la fácil integración de el eID Trust Service en aplicaciones (web). El SDK consiste de:
				<itemizedlist>
					<listitem>
						Referencia de la implementación de un cliente XKMS2 basado en Java
					</listitem>
					<listitem>
						Una implementación .NET (C#) 2.0, disponible para las plataformas Microsoft y Mono.
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>eID Applet y eID Applet Service</title>
			<para>
				Utilizado estos componentes genéricos (Java-Applet), los desarrolladores pueden integrar fácilmente la funcionalidad eID en aplicaciones web. El eID Applet provee un completo soporte para las funcionalidades de la tarjeta inteligente. Esto comprende identificación, autenticación y firma digital. El eID Trust Service utiliza el eID Applet dentro del eID Trust Service Portal y del eID Trust Service Admin Portal. El código fuente para el eID Applet puede ser encontrado en:
				<ulink url="http://code.google.com/p/eid-applet">eID Applet Source Code</ulink>
				.
			</para>
		</section>
		<section>
			<title>Trust Service Portal</title>
			<para>
				Utilizando el eID Trust Service Portal, los ciudadanos pueden verificar la funcionalidad de sus tarjetas inteligentes y validar sus certificados digitales fácilmente. El portal está traducido a muchos lenguajes. El usuario tiene la posibilidad de seleccionar el lenguaje manualmente. Si no se elige manualmente, la configuración del explorador web será usada. El portal además incluye un panel de información, explicando los certificados y la tarjeta en general. Esta información puede ser modificada por un administrador en el eID Trust Service Admin Portal.
			</para>
		</section>
		<section>
			<title>Admin Portal</title>
			<para>
				El eID Trust Service Admin Portal permite a los administradores configurar el eID Trust Service. La siguiente configuración es posible:
				<itemizedlist>
					<listitem>
						<para>
							Agregar, aprobar y remover administradores.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuración de la Política de seguridad del Web Service para ser usada si los mensajes XKMS2 salientes deberían ser firmados o no y configuración del keystore necesario para este fin.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuración de un proxy de red HTTP utilizado por el eID Trust Service para acceder al CRL Repository y al OCSP responder.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuración de tareas de detección de desfase de tiempo, NTP y TSP están soportados.
						</para>
					</listitem>
					<listitem>
						<para>
							Configuración del mensaje de información a ser mostrado en el eID Trust Service Portal, esto para todos los lenguajes que el eID Trust Service Portal soporta.
						</para>
					</listitem>
					<listitem>
						<para>
							Administración de dominios de confianza diferentes, Esto consiste en:
							<itemizedlist>
								<listitem>
									<para>Agregar y remover dominios de confianza</para>
								</listitem>
								<listitem>
									<para>Agregar y remover dominios virtuales de confianza</para>
								</listitem>
								<listitem>
									<para>Establecer el dominio de confianza por defecto. Este es el dominio de confianza que será utilizado en el eID Trust Web Service si no se especifica ningún otro.</para>
								</listitem>
								<listitem>
									<para>Seleccionar puntos de confianza dentro de un dominio de confianza</para>
								</listitem>
								<listitem>
									<para>Seleccionar puntos de confianza dentro de un dominio virtual de confianza
									</para>
								</listitem>
								<listitem>
									<para>Configurar el intervalo de actualización de CRL por punto de confianza
									</para>
								</listitem>
								<listitem>
									<para>Configurar restricciones de certificados por dominio de confianza
									</para>
								</listitem>
								<listitem>
									<para>Configurar si el cache de CRL puede ser utilizado por dominio de confianza</para>
								</listitem>
								<listitem>
									<para>Realizar una actualización manual del cache CRL por punto de confianza. Esto disparara una actualización en todos los CAs bajo ese punto de confianza.</para>
								</listitem>
								<listitem>
									<para>Realizar una actualización manual del cache CRL por cada CA.</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				Un Administrador se autentica a si mismo dentro del eID Trust Service Admin Portal utilizando su tarjeta inteligente. Si aun no existe ningún administrador registrado, el primer usuario que se autentique exitosamente, será registrado como un administrador. Un administrador tiene la posibilidad de registrar administradores adicionales. Un usuario puede solicitar ser un administrador a través de una autenticación exitosa en el eID Trust Service Admin Portal. Después de realizarlo, un administrador existente tendrá la posibilidad de aprobar esta solicitud. El administrador solo será autenticado utilizando la verificación de clave publica durante el inicio de sesión en el eID Trust Service Admin Portal. Validación-PKI para un administrador es innecesaria.
			</para>
		</section>
	</section>
	<section>
		<title>Descripción general</title>
		<para>
			En esta sección proveeremos de una descripción general del diseño del eID Trust Service. El diseño del eID Trust Service está inspirado en el ECPV [HM2003].
		</para>
		<section>
			<title>Entidades de Dominio</title>
			<para>
				Aquí se describen las entidades de dominio utilizadas en el eID Trust Service. Se utiliza JPA v1.0 de la arquitectura JAVA EE.
			</para>
			<section>
				<title>Dominio de Confianza</title>
				<para>
					Un Dominio de Confianza cubre cierta topología PKI. Por ejemplo la estructura eID PKI de Bélgica, la cual consiste en puntos de confianza Raíz CA y Raíz CA2, los Oíd de la tarjeta inteligente y el EVK. Diferentes dominios de confianza pueden ser definidos y configurados por un administrador. Para cada dominio de confianza se puede configurar si cache de CRL es permitido o no. Un dominio de confianza por defecto puede ser asignado, el cual será utilizado en las solicitudes al web Service XKMS2 del eID Trust Service si no se especifica un dominio de confianza explícitamente.
				</para>
			</section>
			<section>
				<title>Dominio Virtual de Confianza</title>
				<para>
					Un Dominio Virtual de Confianza consiste en un conjunto de Dominios de Confianza ya definidos dentro del eID Trust Service. Una validación positiva dentro un dominio virtual de confianza especificado se traduce a sí misma en una validación positiva dentro de al menos uno de los dominios de confianza de el dominio virtual de confianza. De esta manera por ejemplo, se puede definir un dominio virtual de confianza para Europa, conteniendo todos los dominios de confianza de sus miembros.
				</para>
			</section>
			<section>
				<title>Punto de Confianza</title>
				<para>
					Un Punto de Confianza corresponde con una Autoridad de Certificación de Raíz (CA). Un Punto de Confianza esta enlazado siempre a uno o muchos dominios de confianza. Un punto de confianza es utilizado por el validador PKI como punto inicial de la validación de la ruta de certificado. El intervalo de actualización de la cache CRL puede ser configurado por punto de confianza. Cuando el intervalo ha pasado, una actualización de la cache CRL de la CA correspondiente al punto de confianza será realizada, al igual que todas las CAs dependientes.
				</para>
			</section>
			<section>
				<title>CA - Autoridad de Certificación</title>
				<para>
					Una cache de revocación de certificados es mantenida por cada CA. Un CA no está necesariamente enlazada a un punto de confianza. Para cada CA, un registro es mantenido, de la validez de sus registros de revocación de certificados. Este intervalo de validez corresponde a los campos 
					<code>thisUpdate</code>
					y
					<code>nextUpdate</code>
					de el CRL especifico que alimenta esa cache. La validez del intervalo es crucial para prevenir que la validación PKI tome decisiones basada en registros de certificados de revocación expirados.
				</para>
			</section>
			<section>
				<title>Registro de Cache de Revocación de Certificados</title>
				<para>
					Cuando un certificado es revocado, esto será manifestado en la cache de revocación de certificados correspondiente a la CA. Este registro contiene el emisor, numero de serie y fecha de revocación del certificado.
				</para>
			</section>
			<section>
				<title>Administrador</title>
				<para>
					El eID Trust Service Admin Portal, permite habilitar muchos administradores. La Autenticación es basada en la tarjeta inteligente utilizando la clave publica de el certificado de autenticación. Un Administrador puede tener un estado Pendiente si aun no ha sido aprobado por algún otro administrador.
				</para>
			</section>
			<section>
				<title>Configuración de desfase de Reloj</title>
				<para>
					El eID Trust Service cuenta con una tarea de detección de desfase de reloj. El intervalo de la tarea puede ser configurado utilizando una expresión cron. NTP y TSP son soportados.
				</para>
			</section>
			<section>
				<title>Configuración de WS Security</title>
				<para>Se puede configurar si las respuestas XKMS2 del eID Trust Service deberían ser firmadas, así mismo el keystore que será utilizado para este propósito.</para>
			</section>
		</section>
		<section>
			<title>eID Trust Service Model</title>
			<para>
				El diseño del eID Trust Service Model es mostrado en:
				<xref linkend="eid-trust-service-model" />
				La implementación utiliza el framework EJB3.0.
			</para>
			<figure id="eid-trust-service-model">
				<title>eID Trust Service Model</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata format="PNG" fileref="eid-trust-service-model.png"
								scale="75" align="center" />
						</imageobject>
					</mediaobject>
				</screenshot>
			</figure>
			<section>
				<title>Punto de Entrada</title>
				<para>
					El punto de entrada viene con un componente facade de TrustService. Este componente provee funcionalidad para validad una ruta de certificado dada. La lógica de validación provee una estrategia de respaldo hacia la fuente de datos de revocación de certificados utilizada. Primero una verificación es realizada si para un CA especifico, datos locales de revocación de certificados están disponibles en la cache de revocación de certificados. Si no, una validación-PKI clásica será realizada utilizando el siguiente proceso: El OCSP responder es consultado, si no existe para este CA o el request ha fallado, el último recurso es utilizar el CRL de la CA.
				</para>
				<para>
					Al mismo tiempo el harvester es informado de la falta de datos  de revocación de certificado para la CA. La comunicación entre el componente del front-end y el harvester es realizada utilizando una cola JMS.
Si están disponibles registros de revocación de certificados (y son utilizables, de acuerdo a la verificación de actualización) para la CA, entonces esos serán utilizados. En este caso, no es necesario para el eID Trust Service consultar servicios PKI en línea de OCSP y/o CRL.
				</para>
			</section>
			<section>
				<title>Harvester</title>
				<para>
					El harvester es implementado como un EJB3 Message Driven Bean (MDB). Este recibe mensajes desde los componentes del front-end a través de la cola JMS de harvester, iniciando el procesamiento del mismo.
				</para>
				<para>
					El harvester descarga el CRL de la CA especificada, verifica su validez y procesa la cache de datos de revocación de certificados. Después de esto, el harvester activa la cache de revocación de certificados para la CA especificada y v validaciones de ruta de certificado futuras pueden utilizar estos datos.
				</para>
				<para>
					La ventaja de un harvester basado en MDB es que la arquitectura JMS provee reintentos automáticos en caso de falla en la descarga o procesamiento del CRL. Así de este modo, no es necesaria ninguna lógica extra en el harvester para soportar esta funcionalidad.
				</para>
				<para>
					Además de recolectar CRLs para datos de revocación, el harvester-MDB también maneja la tarea de detección de desfase del reloj.
				</para>
			</section>
			<section>
				<title>Scheduler</title>
				<para>
					El scheduler es responsable de la frecuencia de actualización de la cache de revocación de certificados y la detección de desfase de reloj. Esta manejado por el Java EE Timer Service. El beneficio de este es el aspecto transaccional. EL scheduler reprogramara también le Java EE Timer al finalizar sus tareas.
				</para>
				<para>
					El intervalo de actualización de la cache de revocación de certificados es establecida por cada punto de confianza. El scheduler puede ser activado manualmente por un administrador a través de una reprogramación del Java EE Timer.
				</para>
				<para>
					El intervalo de validez, mantenido por cada CA, es crucial para prevenir validaciones PKI tomando decisiones basadas en datos de revocación desactualizados (en el caso de que algo haya salido mal con el scheduler). Como tanto el harvester y el scheduler son manejados por un administrador de transacciones, se garantiza plenamente la consistencia entre los registros de la cache y la validación del intervalo. 
				</para>
				<para>
					A parte de programar actualizaciones de cache de revocación de datos, el scheduler también maneja la tarea de detección de desfase de reloj. Cuando el correspondiente Java EE Timer es disparado, la configuración de detección de desfase es obtenida de la base de datos y una solicitud  NTP o TSP es realizada.
				</para>
			</section>
			<section>
				<title>Cache de Revocación de Certificados</title>
				<para>
					Debido a las actividades coordinadas del harvester y del scheduler, la cache de revocación de certificados solamente contiene datos para las CAs que son usadas activamente por las aplicaciones del Proveedor de Servicios. El sistema agrega automáticamente nuevos CAs a la cache de datos de revocación, durante la ejecución. Esto tiene un impacto positivo en el mantenimiento del eID Trust Service.  Un mantenimiento automático de la cache ocurre transparentemente para las aplicaciones de los Proveedores de Servicio.
				</para>
			</section>
			<section>
				<title>Tiempo</title>
				<para>
					La correctitud del tiempo es crítica en una validación-PKI (revisiones actuales de OCSP y CRL). El eID Trust Service Model contiene una tarea de detección de desfase de reloj (administrada por un Java EE Timer) que revisa periódicamente la correctitud de el reloj local de la maquina. Esto puede realizarse utilizando un servicio NTP o TSP. Ubicación, tiempo de espera y desfase máximo pueden ser configurados por un administrador a través del eID Trust Service Portal.
				</para>
			</section>
		</section>
		<section>
			<title>JAX-WS Web Service Runtime</title>
			<para>
				El eID Trust Service usa JAX-WS 2.1 RI en tiempo de ejecución para el web service XKMS v2. La configuración  de JAX-WS en tiempo de ejecución es mostrada en
				<xref linkend="eid-trust-service-jaxws-runtime" />
				La implementación usa el framework EJB 3.0.
			</para>
			<figure id="eid-trust-service-jaxws-runtime">
				<title>eID Trust Service JAX-WS Web Service Runtime</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata format="PNG" fileref="eid-trust-service-jaxws-runtime.png"
								scale="75" align="center" />
						</imageobject>
					</mediaobject>
				</screenshot>
			</figure>
			<para>
				El cliente SDK provee integración de el eID Trust Service y aplicaciones SOA. Un cliente Java – SDK y un cliente .net v2.0(C#)-SDK son provistos.
			</para>
			<para>
				El  entorno JAX-WS se ejecuta dentro del contenedor del servlet. Se utiliza un Java EE ServletContext Listener, en conjunto con inyección EJB3 estándar , subsecuentemente, un JAX-WX RI InstanceResolver se utiliza para inyectar estas referencias al servicio dentro de los JAX-WS endpoints. Esta configuración permite la independencia del servidor de aplicaciones utilizado.
			</para>
			<para>
				La firma WS-Security opcional a la respuesta XKMS2 es agregada utilizando un JAX-WS SOAPHandler que es configurado dentro de la cadena de endpoints del JAX-WS handler.  
			</para>
			<para>
				A pesar que el JAX-WS tiene una API de integración para contenedores Java EE, se eligió no utilizar esta API. También se decidió implementar el web service XKMS2 como POJO JAX-WS endpoint en lugar de un EJB3 JA-WS endpoint. Esto para prevenir una dependencia mayor con el servidor de aplicaciones Java  EE (por ejemplo al utilizar JBossWS).
			</para>
		</section>
		<section>
			<title>Portales Web</title>
			<para>
				Los portales web utilizan  JSF como tecnología para la vista (como en un modelo MVC). Se utiliza JSF 1.2 RI. Las plantillas son provistas por Facelets. Richfaces son utilizados por sus características AJAX para componentes JSF.
			</para>
			<para>
				El enlace con los componentes del back-end se logra utilizando tecnología JBoss-Seam. 
			</para>
		</section>
		<section>
			<title>Aspectos de Aplicación Java EE </title>
			<section>
				<title>Seguridad</title>
				<para>
					Como modelo de seguridad en el eID Trust Service Admin Portal, se utiliza un modelo de dos-trampas. A parte de que el contenedor del servlet conoce sobre el login/logout, los componentes del modelo utilizan el framework de seguridad EJB3. Un módulo de login  JAAS asigna los roles necesarios a un Director, así de esta manera, el interceptor de autorización EJB3 puede realizar su trabajo.
				</para>
				<para>Este modelo de seguridad tiene el beneficio de que la penetración en el front-end no implica la penetración de el componente de servicio puesto que está separado debido a la asignación independiente de roles que el módulo de login JAAS realiza.</para>
			</section>
			<section>
				<title>Persistencia</title>
				<para>
					El mapeo necesario para lograr persistencia esta realizado utilizando Java EE JPA 1.0 API. El beneficio de esto es la mantenibilidad del esquema de base de datos. Todos los metadatos  (ej. índices) son expresados  usando anotaciones de Java 5. El motor de JPA (Hibérnate) tiene que ser capaz de interpretar estos metadatos correctamente para la generación del esquema de base de datos. Esto es importante para mantener las entidades JPA como una fuente autentica para el esquema de base de datos.
				</para>
				<para>
					Se provee de distribuciones personalizadas para MySQL y Oracle, además de la habilidad de ejecutarse encima una distribución HSQL-Jboss estándar.
				</para>
			</section>
			<section>
				<title>Sistema de Compilación</title>
				<para>
					Apache Maven v2 es utilizado como sistema de compilación.  Para el despliegue de la aplicación Java EE en un servidor de aplicaciones local, simplemente de debe ejecutar:
					<code>mvn jboss:deploy</code>
					.
				</para>
				<para>
					El sistema de compilación está dividido de manera que módulos Java EE diferentes son producidos como artefactos individuales, como se muestra en
					<xref linkend="eid-trust-service-build-system" />
				</para>
				<figure id="eid-trust-service-build-system">
					<title>eID Trust Service Build System</title>
					<screenshot>
						<mediaobject>
							<imageobject>
								<imagedata format="PNG" fileref="eid-trust-service-build-system.png"
									scale="75" align="center" />
							</imageobject>
						</mediaobject>
					</screenshot>
				</figure>
				<para>
					A través del archivo pom.xml que se encuentra en la raíz, se agrupan diferentes artefactos en perfiles de compilación, se administran las dependencias de software y las versiones del proyecto.
				</para>
			</section>
			<section>
				<title>Configuraciones de compilación</title>
				<para>
					Diferentes perfiles de Maven activan diferentes configuraciones. Por defecto se activa la configuración de desarrollo. Otros perfiles son por ejemplo:
					<code>prod-mysql</code>
					y
					<code>prod-oracle</code>
					los cuales permiten crear un artefacto que contiene una distribución JBoss MySQL u Oracle personalizada. Otro perfil llamado SDK disparara la generación de un archivo ZIP comprimido que contiene el SDK, los javadocs, un directorio con todas las dependencias necesarias y una guía de desarrollo. Este perfil puede ser disparado vía:
					<code>mvn -Denv=sdk clean install</code>
					.
				</para>
			</section>
		</section>
	</section>
	<section>
		<title>Especificaciones del Web Service</title>
		<para>
			Esta sección presenta un vistazo de el eID Trust Service-XKMS2 web service. Para una especificación detallada de XKMS v2.0 dirigirse a:
			<ulink url="http://www.w3.org/TR/xkms2/">XKMS v2.0</ulink>
			. El eID Trust Service solamente cubre una porción de la especificación XKMS v2.0 ya que solamente soporta peticiones de validación.
		</para>
		<para>
			Es su configuración mas reducida, un cliente puede especificar una ruta de certificados para validación. El eID Trust Service realizara una validación-PKI en contra del dominio de confianza que se encuentra configurado por defecto. La petición XKMS2 será:
			<programlisting role="text"><![CDATA[
soap:Envelope/soap:Body/xkms2:ValidateRequest/xkms2:QueryKeyBinding/ds:KeyInfo/ds:X509Data/ds:X509Certificate
			]]></programlisting>
			donde el cliente agrega los elementos X509-Certificate en la ruta de certificados a ser validada. Después de la validación, el eID Trust Service XKMS web Service responde con la siguiente respuesta XKMS2:
			<programlisting role="text"><![CDATA[
soap:Envelope/soap:Body/xkms2:ValidateResult/xkms2:KeyBinding/xkms2:Status/@StatusValue=http://www.w3.org/2002/03/xkms#Valid
			]]></programlisting>
			.
			En caso de que la validación fuera invalida, una respuesta similar conteniendo el elemento StatusValue:
			<code>Invalid</code>
			será retornada. Adicionalmente el elemento Status contendrá 1 o más razones URIs XKMS2 indicando el porqué de que la validación a hallado. Revise el link para as detalles del elemento Status 
			<ulink url="http://www.w3.org/TR/xkms2/#XKMS_2_0_Section_5_1">XKMS2 Key Binding Specification</ulink>
			.
		</para>
		<para>
			Es importante resaltar que se asume que el cliente siempre provee de la ruta de certificados completa y que el eID Trust Service no manea la construcción de rutas de certificados.
		</para>
		<para>
			Si el cliente desea validad sus certificados en contra de un Dominio de Confianza distinto al dominio de confianza configurado por defecto, se tiene la opción de especificar el nombre de ese dominio de confianza. El cliente, en ese caso, deberá agregar a la petición, el siguiente elemento (como indica la especificación XKMS2):
			<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:UseKeyWith@Application=urn:be:fedict:trust:trust-domain@Identifier=<trust-domain-name>
			]]></programlisting>
			.
		</para>
		<section>
			<title>Autenticación de Servicio</title>
			<para>
				La autenticación de Servicio para el cliente del web service tiene 3 opciones diferentes:
				<orderedlist>
					<listitem>
						<para>
							El software cliente no requiere ningún servicio de autenticación. Este es el caso en el que el software cliente tiene una conexión dedicada con el eID Trust Service.
						</para>
					</listitem>
					<listitem>
						<para>
							El software cliente utiliza autenticación TLS unilateral. El cliente tiene esta opción al especificar el certificado del servidor eID Trust Service para validación.
						</para>
					</listitem>
					<listitem>
						<para>
							Autenticación de servicio utilizando respuestas XKMS2. Esta opción tiene que ser configurada explícitamente dentro del eID Trust Service Admin portal, puesto que al agregar la firma WS-Security tiene un impacto significativo en el performance del servicio.
						</para>
					</listitem>
				</orderedlist>
			</para>
		</section>
		<section>
			<title>Revocación de Datos</title>
			<para>
				Es posible instruir al eID Trust Service  XKMS2 web Service que devuelva los datos de revocación (repuesta OCSP y/o CRLs) durante la validación PKI. Esto puede ser útil para rutas de certificados de no-repudio donde estos datos serán utilizados para finalizar una firma XAdES. Un elemento
				<code>xkms2:MessageExtension</code>
				es introducido conteniendo el elemento ETSI XAdES v1.3.2 que contendrá estos datos en 
				<code>RevocationValues</code>
				si así es requerido.
			</para>
			<para>
				Si los datos de revocación son requeridos, el eID Trust Service  no utilizara datos de revocación almacenados en la cache local, pero realizara una validación -PKI en línea (OCSP/CRL)  puesto que se requiere datos de revocación recientes para la respuesta. Esto es importante para firmas XAdES.
			</para>
			<para>
				Para especificar que una petición retorne los datos de revocación utilizados, el siguiente elemento tiene que ser añadido a la petición:
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:RespondWith/urn:be:fedict:trust:revocation-data
				]]></programlisting>
				.
			</para>
		</section>
		<section>
			<title>Validación Histórica</title>
			<para>
				Es posible realizar una validación histórica en rutas de certificados. Para esto se debe agregar el elemento 
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:TimeInstant
				]]></programlisting>
				que contiene el tiempo en el cual se desea validar una ruta de certificados dada. Los datos de revocación (respuestas OCSP y/o CRLs) deberán ser añadidos por el mismo cliente en la petición XKMS2. Para esto, la misma extensión utilizada para devolver datos de revocación será usada, siendo este un elemento ETSI XAdES v1.3.2. 
				<code>RevocationValues</code>
				.
			</para>
			<para>
				Las validaciones históricas son útiles  en el contexto de la verificación de firmas digitales ETSI XAdES v1.3.2, enfocados en firmas XAdES-X-L. Las firmas XAdES-A no se toman en cuenta.
			</para>
		</section>
		<section>
			<title>Certificados TSA</title>
			<para>
				Es posible validar certificados TSA utilizando el eID Trust Service XKMS2 web service. Esto es importante para firmas XAdES-T.
			</para>
			<para>
				Para esto, otra extensión
				<code>xkms2:MessageExtension</code>
				ha sido introducida, nombrada
				<code>TSAMessageExtension</code>
				. Esta extensión contiene un elemento de tipo
				<code>xades:EncapsulatedPKIDataType</code>
				que contiene el toquen de sellado de tiempo codificado retirado por una petición de sellado de tiempo. Este toquen tendrá que contener la ruta de certificado del certificado TSA utilizado.
			</para>
			<para>
				El eID Trust Service ejecutara una validación-PKI de la ruta de certificado contenida, contra el dominio de confianza de sellado de tiempo que está configurado en el eID Trust Service y especificado con:
				<programlisting role="text"><![CDATA[
xkms2:ValidateRequest/xkms2:QueryKeyBinding/xkms2:UseKeyWith@Application=urn:be:fedict:trust:tsa@Identifier=<tsa-trust-domain-name>
				]]></programlisting>
				. Adicionalmente se verificara que el certificado TSA contiene la extensión
				<code>ExtendedKeyUsage</code>
				con identificador de propósito de la clave
				<code>id-kp-timeStamping</code>
				.
			</para>
		</section>
	</section>
	<appendix>
		<title>eID Trust Service Developer Guide License</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc.logo.large.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the Creative Commons license.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="share.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You are free to Share — to copy, distribute and transmit the work.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="by.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You must attribute the work in the manner specified by the author or
			licensor (but not in any way that suggests that they endorse you or
			your use of the work).
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nc.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not use this work for commercial purposes.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nd.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not alter, transform, or build upon this work.
		</para>
		<para>
			More information about the Creative Commons license conditions can be
			found at
			<ulink url="http://creativecommons.org/">Creative Commons organization</ulink>
			.
		</para>
	</appendix>
	<appendix>
		<title>eID Trust Service License</title>
		<para>The eID Trust Service source code has been released under the
			GNU LGPL version 3.0.</para>
		<para>
			<code>This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version
				3.0
				as published by the Free Software Foundation.

				This software is
				distributed in the hope that it will be useful,
				but WITHOUT ANY
				WARRANTY; without even the implied warranty of
				MERCHANTABILITY or
				FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public
				License for more details.

				You should have received a copy of the GNU
				Lesser General Public
				License along with this software; if not, see
				http://www.gnu.org/licenses/.</code>
		</para>
	</appendix>
	<appendix>
		<title>Revision history</title>
		<table>
			<title>Revision history</title>
			<tgroup cols="3">
				<colspec colwidth="1*" />
				<colspec colwidth="1*" />
				<colspec colwidth="2*" />
				<thead>
					<row>
						<entry>Date</entry>
						<entry>Author</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>31 Mar 2010</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>Initial version.</entry>
					</row>
					<row>
						<entry>13 May 2014</entry>
						<entry>Rolosa S.A.</entry>
						<entry>Spanish Translation</entry>
					</row>                                          
				</tbody>
			</tgroup>
		</table>
	</appendix>
</article>
